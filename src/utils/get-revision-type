#! /bin/bash

#get-revision-type
#by Julian Sangillo <juliansangillo@gmail.com>
#Determine the revision type from the latest commit messages. If no revision type could be determined, then fallback on the default.
#Revision Types:
#		major
#		minor
#		build
#		patch

LATEST_VERSION="$1";
DEFAULT="$2";

if [ "$#" -ne 2 ]; then
	log "Could not calculate revision! Illegal number of arguments.";
	exit 1
fi

if ! [[ "$LATEST_VERSION" =~ ^[0-9]+(\.[0-9]+)*(\.[A-Za-z]+)?$ ]]; then
	log "Could not calculate revision! The latest version '$LATEST_VERSION' must be integers separated by periods.";
	exit 16
fi

if [ "$DEFAULT" != "build" ] && [ "$DEFAULT" != "patch" ]; then
	log "Could not calculate revision! The default must be either build or patch. Default='$DEFAULT'";
	exit 32
fi

getChangeType() {
	local commit="$1";

	local message="$(git show -s --format=%s $commit)";
	local regex='^([a-zA-Z ]+)(\(.*\))?:.*$';

	log "$commit = $message";
	echo $message | grep -P "$regex" | sed -r "s/$regex/\1/g"
}

getRevisionType() {
	log "Getting revision type ...";
	log "(major, minor, build, patch)";
	log "Default=$DEFAULT";
	
	local type="$DEFAULT";
	local history="$(git rev-list --ancestry-path HEAD ^v$LATEST_VERSION)";
	
	if [ -z "$history" ]; then
		log "No new history. Type: $DEFAULT";
		echo "$DEFAULT";
		return;
	fi
	
	declare -A TYPES=( [major]='BREAKING CHANGE' [minor]='feat perf' [build]='build' [patch]='patch' );
	log "major=${TYPES[major]}";
	log "minor=${TYPES[minor]}";
	log "build=${TYPES[build]}";
	log "patch=${TYPES[patch]}";
	
	log "Commits:"
	while read -r commit; do
		local change="$(getChangeType $commit)";
		
		if [ ! -z "$change" ] && [[ " ${TYPES[@]} " =~ " $change " ]]; then
			if [[ " ${TYPES[major]} " =~ " $change " ]]; then
				type='major';
				break;
			elif [[ " ${TYPES[minor]} " =~ " $change " ]]; then
				type='minor';
				TYPES[minor]='';
				TYPES[build]='';
				TYPES[patch]='';
			elif [[ " ${TYPES[build]} " =~ " $change " ]]; then
				type='build';
				TYPES[build]='';
				TYPES[patch]='';
			elif [ " ${TYPES[patch]} " =~ " $change " ]; then
				type='patch';
				TYPES[build]='';
				TYPES[patch]='';
			fi
		fi
	done <<< "$history"
	
	log "Type: $type";
	echo "$type"
}

echo "$(getRevisionType)";
exit 0